services:
  zookeeper:
    # image: confluentinc/cp-zookeeper:5.0.0
    image: confluentinc/cp-zookeeper:7.3.0
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "zookeeper-shell localhost:2181 ls /"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    # image: confluentinc/cp-kafka:5.0.0
    image: confluentinc/cp-kafka:7.3.0
    restart: unless-stopped
    depends_on:
      - zookeeper
    networks:
      - kafka-network
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic sensor-data-topic --partitions 1 --replication-factor 1
      "
    networks:
      - kafka-network

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - sensor-data:/data/db
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sensordata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  python-app:
    build: .
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    volumes:
      - .:/app
    networks:
      - kafka-network

volumes:
  sensor-data:
  postgres-data:

networks:
  kafka-network:
    driver: bridge
